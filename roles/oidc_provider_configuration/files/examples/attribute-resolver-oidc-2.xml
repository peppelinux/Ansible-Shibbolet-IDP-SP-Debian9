<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is an EXAMPLE configuration file. While the configuration presented in this example file is semi-functional, 
    it isn't very interesting. It is here only as a starting point for your deployment process. Very few attribute definitions 
    and data connectors are demonstrated, and the data is derived statically from the logged-in username and a static example 
    connector. Attribute-resolver-full.xml contains more examples of attributes, encoders, and data connectors. Deployers should 
    refer to the Shibboleth documentation for a complete list of components and their options. -->
<AttributeResolver xmlns="urn:mace:shibboleth:2.0:resolver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oidcext="org.geant.idpextension.oidc.attribute.encoder"
    xsi:schemaLocation="urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd org.geant.idpextension.oidc.attribute.encoder classpath:/schema/idp-oidc-extension-attribute-encoder.xsd">
    <!-- ========================================== -->
    <!-- Attribute Definitions -->
    <!-- ========================================== -->

    <!-- Subject Identifier is a attribute that must always be resolved. 
    There has to be exactly one resolved and filtered attribute that would be encoded as 'sub'.
    This example attribute (the data connector actually ) will generate public or pairwise 'sub' depending on client registration data.  -->



    <AttributeDefinition id="subject" xsi:type="Simple" activationConditionRef="SubjectRequired">
        <InputDataConnector ref="computedSubjectId" attributeNames="subjectId"/>
        <AttributeEncoder xsi:type="oidcext:OIDCString" name="sub" />
    </AttributeDefinition>

    <!-- ========================================== -->
    <!-- Data Connectors -->
    <!-- ========================================== -->
    
    <!-- Data Connector for generating 'sub' claim. 
         The connector may be used to generate both public and pairwise subject values -->
    <DataConnector id="computedSubjectId" xsi:type="ComputedId"
            generatedAttributeID="subjectId"
            salt="%{idp.oidc.subject.salt}"
            algorithm="%{idp.oidc.subject.algorithm:SHA}"
            encoding="%{idp.oidc.subject.encoding:BASE32}">
            <InputAttributeDefinition ref="%{idp.oidc.subject.sourceAttribute}"/>
    </DataConnector>
    
    <DataConnector id="staticAttributes" xsi:type="Static">
        <Attribute id="region">
            <Value>CA</Value>
        </Attribute>
        <Attribute id="postal_code">
            <Value>90210</Value>
        </Attribute>
    </DataConnector>
</AttributeResolver>
